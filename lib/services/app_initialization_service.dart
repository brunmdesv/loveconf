import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'permission_service.dart';

class AppInitializationService {
  static const String _firstRunKey = 'first_run';
  static const String _permissionsRequestedKey = 'permissions_requested';

  /// Verifica se √© a primeira execu√ß√£o do app
  static Future<bool> isFirstRun() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_firstRunKey) ?? true;
  }

  /// Marca que o app j√° foi executado
  static Future<void> markAsNotFirstRun() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_firstRunKey, false);
  }

  /// Verifica se as permiss√µes j√° foram solicitadas
  static Future<bool> werePermissionsRequested() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_permissionsRequestedKey) ?? false;
  }

  /// Marca que as permiss√µes foram solicitadas
  static Future<void> markPermissionsAsRequested() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_permissionsRequestedKey, true);
  }

  /// Inicializa o app, solicitando permiss√µes se necess√°rio
  static Future<void> initializeApp(BuildContext context) async {
    try {
      // Verifica se √© a primeira execu√ß√£o
      final isFirstRun = await AppInitializationService.isFirstRun();
      
      if (isFirstRun) {
        print('üöÄ Primeira execu√ß√£o do app detectada');
        
        // Marca que n√£o √© mais a primeira execu√ß√£o
        await markAsNotFirstRun();
        
        // Verifica se as permiss√µes j√° foram solicitadas
        final permissionsRequested = await werePermissionsRequested();
        
        if (!permissionsRequested) {
          print('üîê Solicitando permiss√µes na primeira execu√ß√£o');
          
          // Aguarda um pouco para o app carregar completamente
          await Future.delayed(const Duration(milliseconds: 500));
          
          // Solicita permiss√µes de notifica√ß√£o
          final granted = await PermissionService.requestNotificationPermission();
          
          // Marca que as permiss√µes foram solicitadas
          await markPermissionsAsRequested();
          
          if (granted) {
            print('‚úÖ Permiss√µes concedidas na primeira execu√ß√£o');
            _showPermissionsGrantedSnackBar(context);
          } else {
            print('‚ö†Ô∏è Permiss√µes negadas na primeira execu√ß√£o');
            _showPermissionsDeniedSnackBar(context);
          }
        }
      } else {
        print('üîÑ App j√° foi executado anteriormente');
        
        // Verifica se as permiss√µes foram solicitadas
        final permissionsRequested = await werePermissionsRequested();
        
        if (!permissionsRequested) {
          print('üîê Permiss√µes ainda n√£o foram solicitadas, solicitando agora');
          
          // Aguarda um pouco para o app carregar completamente
          await Future.delayed(const Duration(milliseconds: 500));
          
          // Solicita permiss√µes de notifica√ß√£o
          final granted = await PermissionService.requestNotificationPermission();
          
          // Marca que as permiss√µes foram solicitadas
          await markPermissionsAsRequested();
          
          if (granted) {
            print('‚úÖ Permiss√µes concedidas');
            _showPermissionsGrantedSnackBar(context);
          } else {
            print('‚ö†Ô∏è Permiss√µes negadas');
            _showPermissionsDeniedSnackBar(context);
          }
        } else {
          print('‚úÖ Permiss√µes j√° foram solicitadas anteriormente');
        }
      }
    } catch (e) {
      print('‚ùå Erro durante a inicializa√ß√£o do app: $e');
    }
  }

  /// Mostra SnackBar informando que as permiss√µes foram concedidas
  static void _showPermissionsGrantedSnackBar(BuildContext context) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('‚úÖ Permiss√µes de notifica√ß√£o ativadas!'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// Mostra SnackBar informando que as permiss√µes foram negadas
  static void _showPermissionsDeniedSnackBar(BuildContext context) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('‚ö†Ô∏è Permiss√µes de notifica√ß√£o negadas. Voc√™ pode ativ√°-las nas configura√ß√µes do app.'),
          backgroundColor: Colors.orange,
          duration: const Duration(seconds: 5),
        ),
      );
    }
  }
}
