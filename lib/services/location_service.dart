import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import '../models/location_record.dart';
import 'notification_service.dart';

class LocationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _collectionName = 'locations';
  
  // Stream controller para atualiza√ß√µes em tempo real
  static final StreamController<List<LocationRecord>> _locationsController = 
      StreamController<List<LocationRecord>>.broadcast();
  
  static Stream<List<LocationRecord>> get locationsStream => _locationsController.stream;

  /// Verifica se as permiss√µes de localiza√ß√£o est√£o concedidas
  static Future<bool> hasLocationPermission() async {
    try {
      LocationPermission permission = await Geolocator.checkPermission();
      return permission == LocationPermission.whileInUse || 
             permission == LocationPermission.always;
    } catch (e) {
      print('‚ùå Erro ao verificar permiss√µes de localiza√ß√£o: $e');
      return false;
    }
  }

  /// Solicita permiss√µes de localiza√ß√£o
  static Future<bool> requestLocationPermission() async {
    try {
      print('üîê Solicitando permiss√µes de localiza√ß√£o...');
      
      // Verifica se o servi√ßo de localiza√ß√£o est√° habilitado
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        print('‚ö†Ô∏è Servi√ßo de localiza√ß√£o desabilitado');
        return false;
      }

      // Verifica permiss√µes atuais
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        print('üîê Permiss√£o negada, solicitando...');
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          print('‚ùå Permiss√£o negada pelo usu√°rio');
          return false;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        print('‚ùå Permiss√£o negada permanentemente');
        return false;
      }

      // Solicita permiss√£o de localiza√ß√£o em background
      if (permission == LocationPermission.whileInUse) {
        print('üîê Solicitando permiss√£o de localiza√ß√£o em background...');
        permission = await Geolocator.requestPermission();
      }

      print('‚úÖ Permiss√µes de localiza√ß√£o concedidas: $permission');
      return permission == LocationPermission.whileInUse || 
             permission == LocationPermission.always;
    } catch (e) {
      print('‚ùå Erro ao solicitar permiss√µes de localiza√ß√£o: $e');
      return false;
    }
  }

  /// Captura a localiza√ß√£o atual do dispositivo
  static Future<LocationRecord?> captureCurrentLocation({
    required String clientId,
    required String adminId,
    String? connectionPin,
  }) async {
    try {
      print('üìç Capturando localiza√ß√£o atual...');
      
      // Verifica permiss√µes
      if (!await hasLocationPermission()) {
        print('‚ùå Sem permiss√µes de localiza√ß√£o');
        return null;
      }

      // Captura a posi√ß√£o atual
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
        timeLimit: const Duration(seconds: 10),
      );

      print('‚úÖ Localiza√ß√£o capturada: ${position.latitude}, ${position.longitude}');

      // Tenta obter o endere√ßo
      String? address;
      try {
        List<Placemark> placemarks = await placemarkFromCoordinates(
          position.latitude,
          position.longitude,
        );
        
        if (placemarks.isNotEmpty) {
          Placemark place = placemarks.first;
          address = '${place.street}, ${place.subLocality}, ${place.locality}';
          print('üìç Endere√ßo obtido: $address');
        }
      } catch (e) {
        print('‚ö†Ô∏è Erro ao obter endere√ßo: $e');
      }

      // Cria o registro de localiza√ß√£o
      LocationRecord locationRecord = LocationRecord.fromCurrentLocation(
        clientId: clientId,
        adminId: adminId,
        latitude: position.latitude,
        longitude: position.longitude,
        address: address,
        connectionPin: connectionPin,
      );

             // Salva no Firestore
       await saveLocationRecord(locationRecord);
       
       // Notifica sobre a nova localiza√ß√£o
       await NotificationService.notifyNewLocation(locationRecord);
       
       print('‚úÖ Localiza√ß√£o salva com sucesso');
       return locationRecord;
    } catch (e) {
      print('‚ùå Erro ao capturar localiza√ß√£o: $e');
      return null;
    }
  }

  /// Salva um registro de localiza√ß√£o no Firestore
  static Future<void> saveLocationRecord(LocationRecord record) async {
    try {
      print('üíæ Salvando localiza√ß√£o no Firestore...');
      
      await _firestore
          .collection(_collectionName)
          .doc(record.id)
          .set(record.toMap());
      
      print('‚úÖ Localiza√ß√£o salva no Firestore');
      
      // Notifica os listeners sobre a nova localiza√ß√£o
      _notifyLocationUpdate();
    } catch (e) {
      print('‚ùå Erro ao salvar localiza√ß√£o no Firestore: $e');
      rethrow;
    }
  }

  /// Busca todas as localiza√ß√µes de um cliente
  static Future<List<LocationRecord>> getClientLocations(String clientId) async {
    try {
      print('üîç Buscando localiza√ß√µes do cliente: $clientId');
      
      QuerySnapshot snapshot = await _firestore
          .collection(_collectionName)
          .where('clientId', isEqualTo: clientId)
          .where('isActive', isEqualTo: true)
          .orderBy('timestamp', descending: true)
          .get();

      List<LocationRecord> locations = snapshot.docs
          .map((doc) => LocationRecord.fromMap(doc.data() as Map<String, dynamic>))
          .toList();

      print('‚úÖ ${locations.length} localiza√ß√µes encontradas');
      return locations;
    } catch (e) {
      print('‚ùå Erro ao buscar localiza√ß√µes: $e');
      return [];
    }
  }

  /// Busca todas as localiza√ß√µes de um admin
  static Future<List<LocationRecord>> getAdminLocations(String adminId) async {
    try {
      print('üîç Buscando localiza√ß√µes do admin: $adminId');
      
      QuerySnapshot snapshot = await _firestore
          .collection(_collectionName)
          .where('adminId', isEqualTo: adminId)
          .where('isActive', isEqualTo: true)
          .orderBy('timestamp', descending: true)
          .get();

      List<LocationRecord> locations = snapshot.docs
          .map((doc) => LocationRecord.fromMap(doc.data() as Map<String, dynamic>))
          .toList();

      print('‚úÖ ${locations.length} localiza√ß√µes encontradas');
      return locations;
    } catch (e) {
      print('‚ùå Erro ao buscar localiza√ß√µes: $e');
      return [];
    }
  }

  /// Busca localiza√ß√µes por PIN de conex√£o
  static Future<List<LocationRecord>> getLocationsByPin(String pin) async {
    try {
      print('üîç Buscando localiza√ß√µes por PIN: $pin');
      
      QuerySnapshot snapshot = await _firestore
          .collection(_collectionName)
          .where('connectionPin', isEqualTo: pin)
          .where('isActive', isEqualTo: true)
          .orderBy('timestamp', descending: true)
          .get();

      List<LocationRecord> locations = snapshot.docs
          .map((doc) => LocationRecord.fromMap(doc.data() as Map<String, dynamic>))
          .toList();

      // Ordena por timestamp mais recente primeiro
      locations.sort((a, b) => b.timestamp.compareTo(a.timestamp));

      print('‚úÖ ${locations.length} localiza√ß√µes encontradas para PIN $pin');
      return locations;
    } catch (e) {
      print('‚ùå Erro ao buscar localiza√ß√µes por PIN: $e');
      // Em caso de erro de √≠ndice, tenta buscar sem ordena√ß√£o
      try {
        QuerySnapshot snapshot = await _firestore
            .collection(_collectionName)
            .where('connectionPin', isEqualTo: pin)
            .where('isActive', isEqualTo: true)
            .get();

        List<LocationRecord> locations = snapshot.docs
            .map((doc) => LocationRecord.fromMap(doc.data() as Map<String, dynamic>))
            .toList();

        // Ordena localmente
        locations.sort((a, b) => b.timestamp.compareTo(a.timestamp));

        print('‚úÖ ${locations.length} localiza√ß√µes encontradas para PIN $pin (sem ordena√ß√£o do Firestore)');
        return locations;
      } catch (e2) {
        print('‚ùå Erro ao buscar localiza√ß√µes sem ordena√ß√£o: $e2');
        return [];
      }
    }
  }

  /// Busca a localiza√ß√£o mais recente de um cliente
  static Future<LocationRecord?> getLatestClientLocation(String clientId) async {
    try {
      print('üîç Buscando localiza√ß√£o mais recente do cliente: $clientId');
      
      QuerySnapshot snapshot = await _firestore
          .collection(_collectionName)
          .where('clientId', isEqualTo: clientId)
          .where('isActive', isEqualTo: true)
          .orderBy('timestamp', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        LocationRecord location = LocationRecord.fromMap(
          snapshot.docs.first.data() as Map<String, dynamic>
        );
        print('‚úÖ Localiza√ß√£o mais recente encontrada: ${location.coordinatesText}');
        return location;
      }

      print('‚ö†Ô∏è Nenhuma localiza√ß√£o encontrada para o cliente');
      return null;
    } catch (e) {
      print('‚ùå Erro ao buscar localiza√ß√£o mais recente: $e');
      return null;
    }
  }

  /// Marca uma localiza√ß√£o como inativa
  static Future<void> deactivateLocation(String locationId) async {
    try {
      print('üóëÔ∏è Desativando localiza√ß√£o: $locationId');
      
      await _firestore
          .collection(_collectionName)
          .doc(locationId)
          .update({'isActive': false});
      
      print('‚úÖ Localiza√ß√£o desativada');
      
      // Notifica os listeners sobre a atualiza√ß√£o
      _notifyLocationUpdate();
    } catch (e) {
      print('‚ùå Erro ao desativar localiza√ß√£o: $e');
      rethrow;
    }
  }

  /// Inicia monitoramento de localiza√ß√µes em tempo real
  static Stream<List<LocationRecord>> startLocationMonitoring({
    String? clientId,
    String? adminId,
    String? connectionPin,
  }) {
    print('üì° Iniciando monitoramento de localiza√ß√µes...');
    
    Query query = _firestore
        .collection(_collectionName)
        .where('isActive', isEqualTo: true)
        .orderBy('timestamp', descending: true);

    if (clientId != null) {
      query = query.where('clientId', isEqualTo: clientId);
    }
    
    if (adminId != null) {
      query = query.where('adminId', isEqualTo: adminId);
    }
    
    if (connectionPin != null) {
      query = query.where('connectionPin', isEqualTo: connectionPin);
    }

    return query.snapshots().map((snapshot) {
      List<LocationRecord> locations = snapshot.docs
          .map((doc) => LocationRecord.fromMap(doc.data() as Map<String, dynamic>))
          .toList();
      
      print('üì° ${locations.length} localiza√ß√µes atualizadas em tempo real');
      return locations;
    });
  }

  /// Notifica os listeners sobre atualiza√ß√µes
  static void _notifyLocationUpdate() {
    // Esta fun√ß√£o pode ser expandida para notificar outros servi√ßos
    print('üì¢ Notificando atualiza√ß√£o de localiza√ß√µes');
  }

  /// Calcula a dist√¢ncia entre duas coordenadas
  static double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    return Geolocator.distanceBetween(lat1, lon1, lat2, lon2);
  }

  /// Verifica se o servi√ßo de localiza√ß√£o est√° habilitado
  static Future<bool> isLocationServiceEnabled() async {
    return await Geolocator.isLocationServiceEnabled();
  }

  /// Obt√©m a √∫ltima localiza√ß√£o conhecida
  static Future<Position?> getLastKnownPosition() async {
    try {
      return await Geolocator.getLastKnownPosition();
    } catch (e) {
      print('‚ùå Erro ao obter √∫ltima posi√ß√£o conhecida: $e');
      return null;
    }
  }

  /// Dispara o servi√ßo de localiza√ß√£o
  static Future<void> dispose() async {
    await _locationsController.close();
  }
}
