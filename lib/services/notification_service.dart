import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import '../models/location_record.dart';

class NotificationService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static final FlutterLocalNotificationsPlugin _localNotifications = 
      FlutterLocalNotificationsPlugin();
  
  static bool _isInitialized = false;

  /// Inicializa o servi√ßo de notifica√ß√µes
  static Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // Configura notifica√ß√µes locais
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');
      
      const DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );

      const InitializationSettings initializationSettings =
          InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );

      await _localNotifications.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );

      // Configura notifica√ß√µes do Firebase
      await _firebaseMessaging.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      // Obt√©m o token do dispositivo
      String? token = await _firebaseMessaging.getToken();
      if (token != null) {
        print('üîî Token de notifica√ß√£o: $token');
        // Aqui voc√™ pode salvar o token no Firestore para enviar notifica√ß√µes
      }

      // Configura handlers para notifica√ß√µes em background
      FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
      
      // Configura handlers para notifica√ß√µes em primeiro plano
      FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

      _isInitialized = true;
      print('‚úÖ Servi√ßo de notifica√ß√µes inicializado');
    } catch (e) {
      print('‚ùå Erro ao inicializar notifica√ß√µes: $e');
    }
  }

  /// Mostra uma notifica√ß√£o local
  static Future<void> showLocalNotification({
    required String title,
    required String body,
    String? payload,
  }) async {
    if (!_isInitialized) await initialize();

    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'location_channel',
      'Localiza√ß√µes',
      channelDescription: 'Notifica√ß√µes sobre localiza√ß√µes capturadas',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
    );

    const NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);

    await _localNotifications.show(
      DateTime.now().millisecond,
      title,
      body,
      platformChannelSpecifics,
      payload: payload,
    );
  }

  /// Notifica sobre nova localiza√ß√£o capturada
  static Future<void> notifyNewLocation(LocationRecord location) async {
    await showLocalNotification(
      title: 'üìç Nova Localiza√ß√£o Capturada',
      body: 'Localiza√ß√£o registrada em ${location.formattedTimestamp}',
      payload: 'location_${location.id}',
    );
  }

  /// Notifica sobre conex√£o estabelecida
  static Future<void> notifyConnectionEstablished(String pin) async {
    await showLocalNotification(
      title: 'üîó Conex√£o Estabelecida',
      body: 'Cliente conectado com PIN: $pin',
      payload: 'connection_$pin',
    );
  }

  /// Notifica sobre conex√£o cancelada
  static Future<void> notifyConnectionCancelled(String pin) async {
    await showLocalNotification(
      title: '‚ùå Conex√£o Cancelada',
      body: 'Conex√£o com PIN $pin foi cancelada',
      payload: 'connection_cancelled_$pin',
    );
  }

  /// Handler para notifica√ß√µes em primeiro plano
  static void _handleForegroundMessage(RemoteMessage message) {
    print('üîî Notifica√ß√£o recebida em primeiro plano: ${message.notification?.title}');
    
    // Mostra notifica√ß√£o local
    if (message.notification != null) {
      showLocalNotification(
        title: message.notification!.title ?? 'Nova Notifica√ß√£o',
        body: message.notification!.body ?? '',
        payload: message.data.toString(),
      );
    }
  }

  /// Handler para notifica√ß√µes em background
  static Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
    print('üîî Notifica√ß√£o recebida em background: ${message.notification?.title}');
    
    // Aqui voc√™ pode processar a notifica√ß√£o em background
    // Por exemplo, salvar no banco local, atualizar UI, etc.
  }

  /// Handler para quando uma notifica√ß√£o √© tocada
  static void _onNotificationTapped(NotificationResponse response) {
    print('üîî Notifica√ß√£o tocada: ${response.payload}');
    
    // Aqui voc√™ pode navegar para uma tela espec√≠fica baseada no payload
    // Por exemplo, abrir a tela de localiza√ß√µes ou detalhes
  }

  /// Inscreve em um t√≥pico para receber notifica√ß√µes espec√≠ficas
  static Future<void> subscribeToTopic(String topic) async {
    await _firebaseMessaging.subscribeToTopic(topic);
    print('üîî Inscrito no t√≥pico: $topic');
  }

  /// Cancela inscri√ß√£o de um t√≥pico
  static Future<void> unsubscribeFromTopic(String topic) async {
    await _firebaseMessaging.unsubscribeFromTopic(topic);
    print('üîî Cancelada inscri√ß√£o do t√≥pico: $topic');
  }

  /// Obt√©m o token atual do dispositivo
  static Future<String?> getToken() async {
    return await _firebaseMessaging.getToken();
  }
}

// Handler global para notifica√ß√µes em background
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await NotificationService._firebaseMessagingBackgroundHandler(message);
}
